[SCE CONFIDENTIAL DOCUMENT]
PlayStation 2 Programmer Tool Runtime Library Release 3.0
        Copyright (C) 2003 Sony Computer Entertainment Inc.
                                        All Rights Reserved

Sample Program Showing How to Use the Test Coverage Functions with iop-gcc and gcov

<Description>
If the "-O0 -fprofile-arcs -ftest-coverage" compile-time options are specified with iop-gcc, code will be included in the generated object that counts the execution frequency for each line of program source code, in memory.

This sample program shows how to write the execution counts to a file and how to display the results with the gcov command.
        
<Files>
        noresident.c     - Coverage test example for a non-resident program
        resident.c       - Coverage test example 1 for a resident program
        removable.c      - Coverage test example 2 for a resident program
        expandgcovtab.sh - Shell script for replacing tab codes generated by gcov with spaces

<Compilation>

        % make

<Execution>

        % rm *.da          ...    Delete accumulated count data
        % dsidb
        dsidb R> reset
        dsidb R> mstart resident.irx
        dsidb R> mstart removable.irx
        dsidb R> mstart ../gcovlib/iopgcovout.irx
        dsidb R> mstart noresident.irx
              ...   Executing noresident.irx multiple times enables you to  
              ...   verify that count data is being accumulated.
        dsidb R> mstart noresident.irx           
        dsidb R> mstart ../gcovlib/iopgcovctl.irx -list
        dsidb R> mstart ../gcovlib/iopgcovctl.irx -stop
        dsidb R> quit
        % gcov noresident.c
        % gcov resident.c
        % gcov removable.c
        % cat noresident.c.gcov       ... Check results
        % cat resident.c.gcov         ... Check results
        % cat removable.c.gcov        ... Check results

<Usage Precautions>
When the -fprofile-arcs option is specified, gcc inserts code at critical points in the generated code for counting the execution frequency, as shown below.
            la    $Ry,$LPBX2
            lw    $Rx,N($Ry)
            addu  $Rx,$Rx,1
            sw    $Rx,N($Ry)

However, since this code is not multithread safe, the execution frequency may not always be counted correctly.

Consequently, the gcov display results will not necessarily be correct for functions that might be called simultaneously from multiple threads or functions that are called from both an interrupt context and a thread context.

<Result File Checking Precautions>

Tabs are assumed to have a width of 8 columns and these tab codes are embedded in the file XXXXX.c.gcov, which is created by gcov.

Depending on the source file tab settings, the display may appear disordered if the tab codes generated by gcov do not match the assumed tab size of the tab codes inside the source file.

If this happens, try using the expandgcov.sh script.

<Relationship Between Resident Library and Intermediate Files>

If an IOP program is compiled with the "-O0 -fprofile-arcs -ftest-coverage" options, files with extensions ".bb" and ".bbg" will be created along with the executable file (IRX file).

In addition, when the executable file is executed on the IOP, a file with extension ".da" is created via the resident library iopgcovout.irx.

The iopgcovctl.irx program which runs on the IOP, can prompt iopgcovout.irx, which is resident, to output execution count data.

The gcov command reads these intermediate files and generates the final result.

A figure that summarizes the above relationships is contained in the file:./gcov-flow.html.

<How to Use the gcov Command>

  Command syntax
     gcov [-b] [-v] [-n] [-l] [-f] [-o directory] SOURCEFILE

   -b
       Write branch frequencies to the output file and write summary information related to branching to stdout. Specifying this option enables you to find out how often each branch in the program was taken.

   -v
      Display the "gcov" version number on stderr.

   -n
       Do not create any "gcov" output files.

   -l
       Use long filenames for included source files.
       For example, if "a.c" includes the header file "x.h" and "x.h" contains code, then when "gcov" is executed for "a.c", a file named "a.c.x.h.gcov" will be created as the output file, instead of one named "x.h.gcov".
       This is useful when "x.h" is included from multiple source files.

   -f
       Output a function-based summary in addition to a file-based summary.

   -o
       Specify the directory where the object file is located.
       gcov will search for files with the extensions ".bb" and ".da" from the specified directory.

For more detailed information, please refer to the GCOV documentation that comes with the GNU C compiler.

<Compiler Optimization When Using Test Coverage Functions>
        gcc optimization should not be performed when the iop-gcc options "-fprofile-arcs -ftest-coverage" are used to perform coverage testing.
        Specifically, all optimization performed by the -O0 option is prohibited.
        For more information, please see the GCOV documentation that comes with the GNU C compiler.


