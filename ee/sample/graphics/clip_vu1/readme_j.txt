[SCEI CONFIDENTIAL DOCUMENT]
DTL-S12000 Next Generation PlayStation Programmer Tool Runtime Library Release 1.0
                 Copyright (C) 1999 by Sony Computer Entertainment Inc.
                                                    All Rights Reserved

Clipping(Backface&Viewvolume) サンプル(VU1)

<サンプルの解説>

        VU1を用いてポリゴンの Backface Clippingと View-volume Clipping
	を行うサンプルです．サンプルでは Triangleと Triangle stripの
	両方に対応しています．処理はすべてポリゴン単位で行い，シザリング
	等は実装していません．したがって，クリッピング領域を一頂点でも
	はみ出たポリゴンは欠けてしまいます．画面上の白線がクリッピング
	領域を表し，コントーローラーで操作可能です．
	本来この領域は，GSのクリッピング領域と同じ(±2048)にしておき，
	この領域をポリゴンがはみ出ないようにするのが目的です．また，
	視点の裏側に行ってしまったポリゴンも表示しないようにします．

<ファイル>

        main.c          :メインプログラム
	main.h          :メインプログラムのプロトタイプ宣言
	defines.h	:各種 .c ファイルで用いるプロトタイプ宣言
        vu1pack.c       :Vu1転送用パケット作成関数
        cube.dsm        :Vu1転送用パケット(データ)ファイル(立方体)
        torus.dsm       :Vu1転送用パケット(データ)ファイル(ドーナツ)
	basic.dsm       :Vu1マイクロコードをロードするファイル
	basic.vsm       :クリッピングを行わない描画マイクロコード
	clip.dsm        :Vu1マイクロコードをロードするファイル
        clip.vsm        :Backface&View-volume Clippingを実装した
			 描画マイクロコード
        clip_opt.vsm    :clip.vsmの最適化版
        tex128.dsm      :テクスチャデータ
        tex64.dsm	:テクスチャデータ

<起動方法>

        % make          ：コンパイル
        % make run      ：実行

        コンパイル後、以下の方法でも実行可能
        % dsedb
        > run main.elf

<コントローラの操作方法>

        ↑↓    :       x軸回転(視点)
        ←→    :       y軸回転(視点)
        L1L2    :       z軸移動(視点，前後)
        △×    :       クリッピング領域変更(y方向)
        □○    :       クリッピング領域変更(x方向)
        R1R2    :       クリッピング領域変更(xy方向)
        selectボタン     :モデルの切り替え（立方体，トーラス）
	startボタン	 :クリッピング処理のON/OFF

<備考>

        処理の概略は、以下の通りです。

        ===== main.c =====
        main():

        1. ダブルバッファの設定、テクスチャのロード
        2. padオープン、マイクロコードの転送
        3. ブレンディング係数の設定、変形用ノイズ分布の初期化
        4. パッドからの情報を読み取る
	5. VU1転送用パケット作成
        6. VU1にパケットを転送して描画
	7. 4.に戻る

	SetViewScreenClipMatrix():
	各頂点をクリップ座標系に射影するためのマトリクス(view_clip)
	を計算する．同時に透視変換用のマトリクス(view_screen)も求める．
	クリップ座標系とは，ビューボリュームを対角値(-1.0, -1.0, -1.0)
	と(1.0, 1.0, 1.0)の立方体に射影した座標系である．したがって，
	射影後の座標を絶対値1.0の範囲で各軸ともクリッピングする事が
	可能となる．

	SetGifClipLine():
	クリッピング領域の境界線を描画するためのGIFパケットを作成する関数．
	ここではVu0で直接透視変換し，その場でGIFのパケットデータを作成
	している．
	

        ===== vu1packet.c =====
	vu1転送用のパケットを生成するための関数群

	Vu1DmaPacket構造体:
	Vu1に転送するパケットを生成，管理する構造体．
	各種オブジェクトデータを一括して管理し，必要最小限のDMAKICKで
	済むようなパケットを生成する．また，パケットデータもダブル
	バッファで動作(作成)するよう設計されている．

	InitVu1DmaPacket():
	Vu1DmaPacket構造体の初期化関数．引数には２つの管理テーブル
	(パケット)へのポインタが渡される．これはパケットのダブル
	バッファのためである．

	GetVu1ObjHead():
	現在有効なパケットの先頭アドレスを返す．

	AddVu1ObjPacket():
	.dsmファイルでコンパイルされ，メモリ上に存在するオブジェクト
	データ(既にVU1用パケット形式になっている)を追加登録する．

	CloseVu1ObjPacket():
	現在有効なパケットを終了させ，ダブルバッファのスイッチを行う．
	返り値に有効なパケットのアドレスを返すため，DMAKICKに使用できる．

	GetVu1EnvHead():
	VU1にマトリクスデータをプリセットするための構造体への
	ポインタを返す．

	CloseVu1EnvPacket():
	VU1で使用するマトリクスデータ(パケット)を閉じ，パケットへの
	ポインタを返す．


        ==== clip.vsm(VU1 micro code) ====

        [clip.vsm]

        1. 各種マトリクスをレジスタVF01 - VF16に設定 & precalculate
	2. 描画属性の判定(Triangle or TriangleStrip)フラグをセット
        3. 各種カウンタセット（ストリップ頂点数など）
        4. GIFタグのロード・ストア、RGBAQ, ST, XYZFのストア
           ポインタの設定
	5. 頂点を透視変換
	6. 法線ベクトルとライトベクトルの内積を計算
	7. 頂点をクリップ座標に射影しフラグを設定(VI01)
	   (XYZとも絶対値1.0の範囲，CLIP命令により過去3点を判定)
	8. BackfaceClipをしフラグを設定(VI12)
	   (VF22-VF23に過去3点透視変換座標を管理．
	    面の法線ベクトルを求め正負を判定する．
	    TriangleStripは正負が交互に検出されるため，
	    符号を反転しながら検出する．)
	9. 二つのフラグの和をとって分岐．XYZ2,XYZ3いずれを
	   キックするか決定．
	10. 法線ベクトルとの内積から頂点の色を求める．
	11. 頂点数だけループする(5.に戻る)
	12. オブジェクトのブロック数だけループする．
	    (4.に戻る．ダブルバッファスイッチ)
	13. オブジェクト数だけループする．(2.に戻る)


