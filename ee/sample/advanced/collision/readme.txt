[SCE CONFIDENTIAL DOCUMENT]
PlayStation 2 Programmer Tool Runtime Library Release 3.0
       Copyright (C) 2001 Sony Computer Entertainment Inc.
                                       All Rights Reserved  

Collision-detection sample program

<Description>
This program uses the GJK algorithm to detect collisions between objects. It also uses the HiG/HiP library for rendering.

<Files>
	main.c			System source code for the sample program
	sample.c		Source code for the sample program
	collision.c		Functions for detecting collisions
	vector.h		Inline functions used by collision.c,
including vector/matrix arithmetic functions
	util.c			Utility program source code
	camera.c		Program source for setting up camera
	light.c			Program source for setting up light source
	sample_func.tbl		File containing registered sample-program functions
	vu0Coll.vcl		VCL (VU command-line) source for Vu0 microprogram used by collision algorithm
	vu0Coll.vsm     	VSM source            
	data/*.bin		Binary data files
	data/*.s		ASCII data files

<Data Files>
	data/block.bin		Rendering model
	data/ellipsoid.bin	Rendering model
	data/cblock.bin		gjkobj-file for collision detection
	data/cellipsoid.bin	gjkobj-file for collision detection

<Run aMethod>
	% make run

<Controller Operation>
The sample menu will appear when the program is launched. The program can be started from here.

<Using the Menu>
Press the Start button to return from the sample screen to the menu screen.

<Using Sample Mode>
Start button: return to menu.

This sample can be used in a number of different operating modes. Press the Select button to choose a mode. Doing so will display the currently selected mode and how to use it on screen.

The following modes are available:
	<Camera Move Mode>	Set camera parameters
	<Light Ctrl Mode>	Set lighting parameters (directional lighting)
	<Obj Ctrl Mode>		Move / rotate object 0
	<Coll Ctrl Mode>	Select collision mode:
	COLLISION CHECK
		Checks whether objects intersect
		(uses is_collision() function)
	CALC. DISTANCE
		Calculates shortest distance between objects
		(uses calc_dist() function)
	FOLLOW SHORTEST DISTANCE
		Moves object 1 by minimum distance until distance between objects is 0.01 or less
		(uses calc_dist() function)

<Collision-detection Functions>
alloc_gjkobj_neighbors()
	Allocates contiguous points for colliding objects

init_collision()
	Loads Vu0 microcode into Vu0 program memory

gjk_init()
	Initializes GJKObj and Simplex structure used by sample

is_collision()
	Checks whether a collision has occurred

calc_dist()
	Calculates minimum distance between objects

free_gjkobj_neighbors()
	Frees memory used by adjacent points

<Notes>
See overview.txt for details on the algorithm used by this sample.

The display of the amount of CPU and DMA being used also includes the debug-box display time for showing debug messages and minimum distance between objects.

<Loading data>
This program can be used to load data from the host. Before loading data, the data needs to be generated by the host, as explained above. The data path is given as a relative path to the directory containing the sample's executable file main.elf.

In this sample, binary data should be placed under the data directory which is in the directory containing main.elf.

<Addenda>
- Adding user samples
Additional sample programs can be easily added to this sample program group as follows.

DEFFUNC(...) is described in sample_func.tbl.

Enter the name of the sample program you wish to add inside the parentheses. For example, enter DEFFUNC(USER_PROG) to add the following entry to the program's main menu.

	> USER_PROG

Select this item using the Circle button. Doing so calls the following function once.

	USER_PROG_init()

Then, the following function is called each frame.

	USER_PROG_main()

USER_PROG_main() will be called as long as it continues to return 0. 

If USER_PROG_main() returns a non-zero value, USER_PROG_exit() will be called in the next frame and the exit process will be executed.

It's easy to add your own program MY_PROGRAM (for example) following this procedure.

1. First, add DEFFUNC(MY_PROGRAM,comment) to sample_func.tbl

2. Next, create a file containing the following:

	void MY_PROGRAM_init()
	int MY_PROGRAM_main()
	void MY_PROGRAM_exit()

3. Add the file you created in step 2 to the source definition section of the makefile.

4. make the file.

