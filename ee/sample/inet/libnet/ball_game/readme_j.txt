[SCE CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.5.3
                  Copyright (C) 2001 Sony Computer Entertainment Inc.
                                                     All Rights Reserved

libnetライブラリを用いた、udpパケットをもちいて
サーバ・クライアントのデータ交換を行うサンプル


<サンプルの解説>
        このプログラムは、linux上で動作するサーバープログラムで
        ボールの軌道計算・衝突などの物理演算を行い、その結果を
        各"PlayStation 2"クライアントプログラムで受信して描画するものです

[ 注意 ]
	このサンプルでは USB イーサアダプタを使用する場合に、an986.irx が
	必要です。
	an986.irx については、タイトル内での使用を禁止としているため
	（詳細は 2000/11/22 付けの SCE-NET の「技術情報」を参照ください）
	リリースパッケージ（sce/iop/modules 下）には含まれておりません。
	SCE-NET の「ダウンロード」->「その他共通ツール」からダウンロード
	してください。

<ファイル>

/usr/local/sce/ee/sample/inet/ball_game/ee:

        buff0.dsm       ：トリプルバッファの転送状態０を設定するパケット
        buff1.dsm       ：トリプルバッファの転送状態１を設定するパケット
        buff2.dsm       ：トリプルバッファの転送状態２を設定するパケット
        grid.dsm        ：地面のモデル
        m_opt.vsm       ：描画用マイクロコード 最適化
        main.c          ：メイン関数
        mat.dsm         ：地面のテクスチャ
        mathfunc.c      ：各種数値演算関数
        mathfunc.h      ：各種パラメータを定義
        matrix.dsm      ：マトリクス用パケットのテンプレート
        no[1-4].dsm     ：１番から４番のテクスチャ
        packet.dsm      ：path1/path2に流すパケットデータ
        phys.c          ：ボールの位置を計算しパケット中にセットする関数
        sphere.dsm      ：ボールのモデル
        main.h      	：サンプルのパラメータやプロトタイプ宣言

/usr/local/sce/ee/sample/inet/ball_game/gamed:
        gamed.c         : サーバプログラムメイン関数
        gamed.h         : サーバプログラムヘッダファイル
        ntohf.c         : エンディアン変換用ユーティリティ関数
        ntohf.h         : 同ヘッダファイル
        physics.c       : 軌道計算・衝突等の物理計算処理
        physics.h       : 同ヘッダファイル

/usr/local/sce/ee/sample/inet/ball_game/common:
        common.h        : サーバ、クライアントで共通のヘッダファイル

<起動方法>
        $ make                          : コンパイル

まずサーバプログラムである gamed を起動します。gamed はlinux上で
動作します。

        $ cd gamed; gamed               : linux上でサーバプログラムを実行

次に、別のterminalでクライアントプログラムを起動します。

        $ cd ee
        $ dsedb -r run main.elf <saddr>
                                        : クライアントの実行。
                                          saddr は gamed が起動している
					  サーバ
        
以下、複数台のクライアントでクライアントプログラムを実行する毎にボールが
追加されます。

<コントローラの操作方法>
        START ボタン : 自クライアントのボールの再落下

<備考>
	本プログラムでは接続環境として、USBイーサネット、HDD イーサネット
	を想定しています。
	本プログラム中の先頭にある以下の #define を切り替えることによって
	接続環境を変更することが可能です。
	
	#define USB_ETHERNET				: USBイーサネット
	#define HDD_ETHERNET				: HDDイーサネット

	IPアドレスの変更や PPP を使用する場合は、各接続環境用の設定名 
	"Combination?"(? は数値) が示す設定ファイルを適切に変更して下さい。
	なお、下記がそれぞれに対応する設定名および設定ファイルです。

	USBイーサネット          Combination4         net003.cnf
	HDDイーサネット          Combination6         net005.cnf

	また本プログラムでは、/usr/local/sce/conf/net 以下にある平文の
	設定ファイルを参照しています。これは本プログラムが開発サンプル用
	途であるためで、正式のタイトル等では個体符号化された設定ファイル
	を用いる必要がある事に注意して下さい。
	個体符号化されたファイルの利用方法については、設定アプリケーション
	サンプルを参照して下さい。

	現在の接続環境設定ファイルでは、一つの設定ファイルには必ず一つしか
	インタフェースが指定されないため、本プログラムでも複数のデバイスを
	同時に利用することは想定していません。
	本プログラムは、目的のデバイスがただ一つ接続されている状況で
	動作します。
	同一デバイスの複数接続なども考慮していませんのでご注意下さい。

<処理概略>
        処理の概略は、以下の通りです。

        [クライアント]
        1. 各種モジュールのロード、inetの初期化
        2. リモートポートへの接続
        3. サーバへのポジションリクエスト
        4. startが押された場合、ポジションリセットを要求をサーバに
        5. サーバから各クライアントのボールの情報を受け取り、
           それぞれを描画。

        [サーバ]
        1. 初期化し、クライアントからの接続を待つ。
        2. 接続される毎にスレッドを起動して、各クライアントからの
           位置情報リクエストに備える。
        3. 位置情報リクエストが入ったら、クライアントに現在の
           位置情報を送信する。
        4. 接続された全クライアントにリクエストを送信する毎に、
        　 単位時間を進めて位置の再計算を行う。


