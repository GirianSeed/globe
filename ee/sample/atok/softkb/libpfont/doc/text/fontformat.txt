[SCE CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library libpfont Version 1.2
                  Copyright (C) 2003 Sony Computer Entertainment Inc.
                                                  All Rights Reserved

                        フォントファイルフォーマット
                       ==============================

1 ファイルフォーマット
-----------------------

1.1 全体構造

        図<fontformat001.gif>


  数値は特に明示しない限りsignedとして扱います。
  予約領域、パディング領域は常に0です。

1.2 ヘッダセクション

  [ヘッダ部]
          +----------+-----------------------------+
          | 名称     | byte                        |
          +==========+=============================+
          | ID       | 4 (0x00000000:unsigned)     |
          +----------+-----------------------------+
          | VERSION  | 4 (0x00000000:unsigned)     |
          +----------+-----------------------------+
          | SIZE     | 4 (>0:バイト数（ID部含む）) |
          +----------+-----------------------------+
          | RESERVED | 4 (0)                       |
          +----------+-----------------------------+
  [共通情報]
          +----------------------------+-------------------------------+
          | 名称                       | byte                          |
          +============================+===============================+
          | フォント名                 | 31+1 (UTF8'\0')               |
          +----------------------------+-------------------------------+
          | コメント                   | 31+1 (UTF8'\0')               |
          +----------------------------+-------------------------------+
          | フォント全体の最大 ASCENT  | 2 (>=0:ブロック毎にスケールを |
          |                            | 適用したもので計算)           |
          +----------------------------+-------------------------------+
          | フォント全体の最大 DESCENT | 2 (<=0:ブロック毎にスケールを |
          |                            | 適用したもので計算)           |
          +----------------------------+-------------------------------+
          | フォント全体の最大 WIDTH   | 2 (>0:ブロック毎にスケールを  |
          |                            | 適用したもので計算)           |
          +----------------------------+-------------------------------+
          | reserved                   | 2 (0)                         |
          +----------------------------+-------------------------------+
          | BLOCK 数                   | 4 (>=0:n)                     |
          +----------------------------+-------------------------------+
          | BLOCK 1 オフセット         | 4 (>0:ヘッダ部先頭から)       |
          +----------------------------+-------------------------------+
          | BLOCK 2 オフセット         | 4 (>0:ヘッダ部先頭から)       |
          +----------------------------+-------------------------------+
          | ：                         | ：                            |
          +----------------------------+-------------------------------+
          | BLOCK n オフセット         | 4 (>0:ヘッダ部先頭から)       |
          +----------------------------+-------------------------------+

1.3 BLOCKセクション構造

        図<fontformat002.gif>

  [BLOCKヘッダ情報]
      ブロック先頭はqwordの境界になければならなりません。

  +-------------------------+-----------------------------------------------------+
  | 名称                    | byte                                                |
  +=========================+==========+==========================================+
  | ID                      | 4 (0x00000000:unsigned)                             |
  +-------------------------+----------+------------------------------------------+
  | VERSION                 | 4 (0x00000000:unsigned)                             |
  +-------------------------+----------+------------------------------------------+
  | SIZE                    | 4 (>0:バイト数（ID部含む）)                         |
  +-------------------------+----------+------------------------------------------+
  | RESERVED                | 4 (0)                                               |
  +-------------------------+----------+------------------------------------------+
  | フラグ                  | 4 ()                                                |
  |                         +----------+------------------------------------------+
  |                         | 0-2bit   | 3bits TEXTURE カラーモード               |
  |                         |          | 000…4bit index                          |
  |                         |          | 　　 (imageは横8,縦4pixel単位を推奨) 32  |
  |                         |          | 001…8bit index                          |
  |                         |          | 　　 (imageは横8,縦2pixel単位を推奨) 64  |
  |                         |          | 010…16bit direct                        |
  |                         |          | 　　 (imageは横4,縦2pixel単位を推奨) 64  |
  |                         |          | 011…24bit direct                        |
  |                         |          | 　　 (imageは横8,縦2pixel単位を推奨) 192 |
  |                         |          | 100…32bit direct                        |
  |                         |          | 　　 (imageは横2,縦2pixel単位を推奨) 64  |
  |                         +----------+------------------------------------------+
  |                         | 3bit     | 1bit  proportional形式                   |
  |                         |          | 0…固定                                  |
  |                         |          | 1…個別                                  |
  |                         +----------+------------------------------------------+
  |                         | 4- 31bit | 28bits Reserved(0)                       |
  +-------------------------+----------+------------------------------------------+
  | 出力サイズ補正値X       | 4 (float)                                           |
  +-------------------------+----------+------------------------------------------+
  | 出力サイズ補正値Y       | 4 (float)                                           |
  +-------------------------+----------+------------------------------------------+
  | IMAGE 1 文字 幅 pixel   | 2 (>0)                                              |
  +-------------------------+----------+------------------------------------------+
  | IMAGE 1 文字 高さ pixel | 2 (>0)                                              |
  +-------------------------+----------+------------------------------------------+
  | BLOCK 内の最大 ASCENT   | 2 (>=0)                                             |
  +-------------------------+----------+------------------------------------------+
  | BLOCK 内の最大          | 2 (<=0)                                             |
  | DESCENT                 |                                                     |
  +-------------------------+----------+------------------------------------------+
  | BLOCK 内の最大 WIDTH    | 2 (>0)                                              |
  +-------------------------+----------+------------------------------------------+
  | reserved                | 2 (0)                                               |
  +-------------------------+----------+------------------------------------------+

  [BLOCKヘッダ（オフセットテーブル）]
  +-----------------------------------------+-------------------------+
  | 名称                                    | byte                    |
  +=========================================+=========================+
  | 文字数                                  | 4 (>0:M)                |
  +-----------------------------------------+-------------------------+
  | image データの先頭へのオフセット        | 4 (>0:BLOCK 先頭から、  |
  |                                         | qword境界、バイト単位)  |
  +-----------------------------------------+-------------------------+
  | codeindex 数                            | 4 (>0:N)                |
  +-----------------------------------------+-------------------------+
  | codeindex データの先頭へのオフセット    | 4 (>=0:BLOCK 先頭から、 |
  |                                         | qword境界、バイト単位)  |
  +-----------------------------------------+-------------------------+
  | codemap 数                              | 4 (>0:L)                |
  +-----------------------------------------+-------------------------+
  | codemap データの先頭へのオフセット      | 4 (>=0:BLOCK 先頭から、 |
  |                                         | qword境界、バイト単位)  |
  +-----------------------------------------+-------------------------+
  | proportional 数                         | 4 (>0 or 1:M)           |
  +-----------------------------------------+-------------------------+
  | proportional データの先頭へのオフセット | 4 (>=0:BLOCK 先頭から、 |
  |                                         | qword境界、バイト単位)  |
  +-----------------------------------------+-------------------------+
  | kerning 数                              | 4 (>=0:K 現在は0固定)   |
  +-----------------------------------------+-------------------------+
  | kerningデータの先頭へのオフセット       | 4 (>=0:BLOCK 先頭から、 |
  |                                         | qword境界、バイト単位)  |
  +-----------------------------------------+-------------------------+
  | clut エントリ数                         | 4 (>=0)                 |
  +-----------------------------------------+-------------------------+
  | clut データの先頭へのオフセット         | 4 (>=0)                 |
  +-----------------------------------------+-------------------------+

1.4 フォントデータ情報

  [image 情報]
  イメージは必ず128ビット単位。size(qword)=(bitcount*w*h+127)/128
  パディングには 0 を入れます。
        文字 0 番目
          +------------+--------+
          | 名称       | byte数 |
          +============+========+
          | IMAGE DATA | X      |
          +------------+--------+
        文字 1 番目
        　：
        文字 M-1 番目
  [codeindex 情報]
      codeindex同士で範囲が重なってはいけません。
      codeindexは昇順にソートされていなければなりません。
      文字コードで指定される先頭の文字は必ず存在しなくてはいけません。
        0 番目
          +----------------+------------+
          | 名称           | byte数     |
          +================+============+
          | 先頭文字コード | 4 (UCS2)   |
          +----------------+------------+
          | 終端文字コード | 4 (UCS2)   |
          +----------------+------------+
          | 先頭map番号    | 4 (0〜L-1) |
          +----------------+------------+
          | 先頭文字番号   | 4 (0〜M-1) |
          +----------------+------------+
        1 番目
        　：
        N - 1 番目

  [codemap 情報]
      codemap のindexは昇順になっていなければなりません。
      indexに0xffffUが出現した場合それを参照するコードは無効です (文字が無
      い)。
        0 番目
          +-------+--------------------------------+
          | 名称  | byte数                         |
          +=======+================================+
          | index | 2 (0〜65534 or 65535:unsigned) |
          +-------+--------------------------------+
        1 番目
        　：
        L - 1 番目
  [proportional 情報]
      固定時は１つのみ。個別時は文字数分(M個)存在します。
        文字 0 番目
          +--------------+------------+
          | 名称         | byte数     |
          +==============+============+
          | BASE POINT X | 2 (>=0)    |
          +--------------+------------+
          | BASE POINT Y | 2 (>=0)    |
          +--------------+------------+
          | L BEARING    | 2 (<=0)    |
          +--------------+------------+
          | R BEARING    | 2 (>=0)    |
          +--------------+------------+
          | ASCENT       | 2 (>=0)    |
          +--------------+------------+
          | DESCENT      | 2 (<=0)    |
          +--------------+------------+
          | WIDTH        | 2 (>0)     |
          +--------------+------------+
          | kerningTAG   | 2 (0:予約) |
          +--------------+------------+
        文字 1 番目
        　：
        文字 M-1 番目
  [kerning 情報]
      予約（現在0固定）
  [clut 情報]
      CLUT エントリ GS の PSMCT32 形式のデータがエントリー番号で昇順に並ん
      でいます。

2 データの内容について
-----------------------

2.1 指定codeのblock内文字番号の求め方

        int search(int code){
          for(n = 0; n < N; n++){
            if((code >= codeindex[n].先頭文字コード) && (code <= codeindex[n].終端文字コード)){
              int ofs = code - codeindex[n].先頭文字コード;
              u_char idx = codemap[codeindex[n].先頭map番号 + ofs];
              if((0 != ofs) && (0 == idx)){
                return -1; //このブロック内に指定文字は無い
              }
              return codeindex[n].先頭文字番号 + idx; // 見つけた文字番号
            }
          }
          return -1; // このブロックに指定文字は無い
        }

      codemapとはcodeindexで指定された範囲内で実際に存在する文字を区別しま
      す。

2.2 コードの優先順位

      同じ文字コードが複数のcodemapや複数のblockに存在する場合先に出現した
      ものが優先されます。


2.3 proportinal データ

        図<fontformat003.gif>


      ASCENT/DESCENT/R BEARING/L BEARING の符号は、BASE POINT (X, Y)を (0,
       0) の原点とし、
        図<fontformat004.gif>

      とします。
      よって、ASCENT/R BEARING は正、DESCENT/L BEARING は負の値となります。
      その他数値は全て正です。KERNING 情報タグは予約です。

